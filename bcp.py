#!/usr/bin/python3.6

'''

bcp.py: basemount cp

    Step 2 of the BaCR pipeline. Copies and organizes .fastq files from an
    Illumina amplicon NGS run using the layout of basemount (a tool to
    mount one's Basespace account as a linux filesystem). .fastq files are
    organized by forward/reverse read, projectID and guide sequence. bcp
    was designed to put data from multiple projects with one or more guide
    sequences each into a format that can be easily batch analyzed

    Designed for use by UIC's Genome Editing Core
    
    Written by Cody Hasty in vim 7.4 on centos 7 on 08/2019

Usage:

    bcp.py -flag path_to_basemount_folder bacr_spreadsheet.csv

    flags:
        -p  Download from Basespace "Projects" folder
        -r  Download from Basespace "Runs" folder
        -d  Download from folder generated by Basespace downloader
        -s  bcp.py is skipped (used by BaCR.sh)
        -h  help: list an example of bcp.py usage

    ##NOTE: The files are copied and organized into the current working
    directory. Remember to cd into the place you wish to place your files

'''

import os
import pandas
from pathlib import Path
import shutil
import sys

###########################################################################

#
## validates argc, flag, and filepaths
#

def checkInputs(argv):
    # help flag
    if str(sys.argv[1]) == '-h':
        print('''
        bcp.py: basemount cp 

            Step 2 of the BaCR pipeline. Copies and organizes .fastq files from an
            Illumina amplicon NGS run using the layout of basemount (a tool to
            mount one's Basespace account as a linux filesystem). .fastq files are
            organized by forward/reverse read, projectID and guide sequence. bcp
            was designed to put data from multiple projects with one or more guide
            sequences each into a format that can be easily batch analyzed

            Designed for use by UIC's Genome Editing Core

            Written by Cody Hasty in vim 7.4 on centos 7 on 08/2019

        Usage:

            bcp.py -flag abs_path_to_basemount_folder bacr_spreadsheet.csv

        flags:
            -p  Download from Basespace "Projects" folder
            -r  Download from Basespace "Runs" folder
            -d  Download from folder generated by Basespace downloader
            -s  bcp.py is skipped (used by BaCR.sh)
            -h  help: list an example of bcp.py usage

            ##NOTE: The files are copied and organized into the current working
            directory. Remember to cd into the place you wish to place your files
        ''')
        exit()
    # check argc
    if len(sys.argv) != 4:
        print("Error: Invalid command line arguments")
        print("Example: bcp.py -p path_to_basemount_folder bacr_csv")
        exit()
    # check flag
    if str(sys.argv[1]) not in ['-p', '-r', '-d', '-s']:
        print("Error: Invalid flag")
        print('''flags: 
            -p\tDownload from Basespace "Projects" folder
            -r\tDownload from Basespace "Runs" folder
            -d\tDownload from folder generated by Basespace downloader
            -s\tbcp.py is skipped (used by BaCR.sh)
            -h\thelp: list an example of bcp.py usage''')
        exit()
    # check basemount filepath. It will almost always be an absolute path
    if Path(str(sys.argv[2])).exists() == False:
        print('Error: Invalid path to basemount directory')
        print('Make sure you are using the correct absolute path')
        exit()
    # check csv filepath
    if Path(str(sys.argv[3])).exists() == False:
        print('Error: Invalid path to BaCR csv file')
        exit()

###########################################################################

#
## creates a directory for each project and the appropriate 
## subdirectory for each guide in their respective projects
#

def buildRunDirectory(csvFile):
    for i in range(len(csvFile.Projects)):
        try:
            #make project dir
            os.makedirs(str(csvFile.Projects[i]))
            if str(csvFile.GuideNames[i]) == 'nan':
                #empty GuideName, make proj subdir
                buildProjectSubdirectory(str(csvFile.Projects[i]))
            else:
                #add guide subdir to new proj dir
                buildGuideSubdirectory(str(csvFile.Projects[i]), 
                                       str(csvFile.GuideNames[i]))
        except FileExistsError:
            #project dir exists, add guide subdir to it
            buildGuideSubdirectory(str(csvFile.Projects[i]),
                                   str(csvFile.GuideNames[i]))

###########################################################################

#
## creates the subdirectory structure for a given guide
#
        
def buildGuideSubdirectory(projectID,guideName):
    os.makedirs(projectID + '/' + guideName)
    os.makedirs(projectID + '/' + guideName + '/' + 'R1')
    os.makedirs(projectID + '/' + guideName + '/' + 'R2')
    os.makedirs(projectID + '/' + guideName + '/' + 'PieCharts')
    os.makedirs(projectID + '/' + guideName + '/' + 'FreqTables')
    os.makedirs(projectID + '/' + guideName + '/' + 'Analyses')

###########################################################################

#
## creates the subdirectory structure for a project with one guide
#

def buildProjectSubdirectory(projectID):
    os.makedirs(projectID + '/' + 'R1')
    os.makedirs(projectID + '/' + 'R2')
    os.makedirs(projectID + '/' + 'PieCharts')
    os.makedirs(projectID + '/' + 'FreqTables')
    os.makedirs(projectID + '/' + 'Analyses')

###########################################################################

#
## Loops through .fastq files according to the directory structure of
## basemountDir/Projects/, and calls cpFastq on each
#

def cpFromProjects(csvFile, basemountPath):
    #loop through sample directories
    for sampleDir in basemountPath.glob('./Samples/*'):
        #exclude hidden files
        if sampleDir.name.startswith('.'):
            continue
        #loop through fastq files in each sample directory
        for fastq in sampleDir.glob('./Files/*'):
                cpFastq(fastq, csvFile)

###########################################################################

#
## Loops through .fastq files according to the directory structure of
## basemountDir/Runs, and calls cpFastq on each
#

def cpFromRuns(csvFile, basemountPath):
    #loop through index directories
    for indexDir in basemountPath.glob('./Properties/Output.Samples/*'):
        #exclude hidden files
        if str(indexDir.name).startswith('.'):
            continue
        #loop through fastq files in each index directory
        for fastq in indexDir.glob('./Files/*'):
            cpFastq(fastq, csvFile)


###########################################################################

#
##
#

#def cpFromDownloader():

###########################################################################

#
## helper function for cpFastq. copies .fastq from fastqPath to 
## destinationPath, and prints result of copy to stdout
#

def cpPrint(fastqPath, destinationPath):
    if shutil.copy(fastqPath, destinationPath):
        print('copying ' + fastqPath.name + ' to ' + str(destinationPath))
    else:
        print('ERROR: ' + fastqPath.name + ' was not printed to ' +
              str(destinationPath))


###########################################################################

#
##
#

def cpFastq(fastq, csvFile):
    for i in range(len(csvFile.Projects)):
        if str(csvFile.Projects[i]) in fastq.name:
            # fastq matched to dir
            if str(csvFile.GuideNames[i]) == 'nan':
                # no GuideName, cp to projSubDir
                if '_R1_' in fastq.name:
                    cpPrint(fastq, Path(str(csvFile.Projects[i] + '/R1')))
                else:
                    cpPrint(fastq, Path(str(csvFile.Projects[i] + '/R2')))
            elif str(csvFile.GuideNames[i]) in fastq.name:
                # fastq matched to GuideName, cp to guideSubDir
                if '_R1_' in fastq.name:
                    cpPrint(fastq, str(str(csvFile.Projects[i]) + '/' + 
                            str(csvFile.GuideNames[i]) + '/R1'))
                else:
                    cpPrint(fastq, str(str(csvFile.Projects[i]) + '/' + 
                            str(csvFile.GuideNames[i]) + '/R2'))
                 
####MAIN###################################################################

checkInputs(sys.argv)
 
# declare variables
bcpFlag = str(sys.argv[1])
basemountPath = Path(str(sys.argv[2]))
csvFile = pandas.read_csv(sys.argv[3])

buildRunDirectory(csvFile)

if bcpFlag == '-p':
    cpFromProjects(csvFile, basemountPath)
if bcpFlag == '-r':
    cpFromRuns(csvFile, basemountPath)
elif bcpFlag == 'd':
    cpFromDownloader()

